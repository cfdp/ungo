<?php

/* Returns the relevant profile2 user picture, $uid is sent along from comments */
function cfdp_uf_get_user_picture(&$variables, $uid){
 
  // get user id from current node if it is not passed as parameter
  if (arg(0) == 'node' && is_numeric(arg(1)) && !$uid ) {
    // Get the nid
    $nid = arg(1);
    $node = node_load($nid);
    $uid = $node->uid;
  }
  
  $user = user_load($uid);

  /* @todo: if the user doesn't have a profile2 profile, we get a nasty error...'*/
  if (in_array('client', $user->roles)) {
    $profile = profile2_load_by_user($uid, 'client');
  }
  else if (in_array('counselor', $user->roles)) {
    $profile = profile2_load_by_user($uid, 'counselor');
  }
  else if (in_array('authenticated user', $user->roles)) {
    /* This is a pretty crude way of getting around the missing profile2 issue @todo: find better way */
    return '<img alt="" src="/sites/default/files/default_images/profile_default_0.jpg" typeof="foaf:Image">';
  }
  else {
    //user is anonymous - this could happen if anonymous users can post content. @todo: handle this case!
    return '<img alt="" src="/sites/default/files/default_images/profile_default_0.jpg" typeof="foaf:Image">';
  }

  $display = array(
                'type' => 'image',
                'label'=> 'hidden',// inline, above
                'settings'=>array(
                            'image_style'=> 'ungo_profile_img',
                            'image_link'=> 'content',
                ));
                
  return drupal_render(field_view_field('profile2', $profile, 'field_profile_picture', $display));
}

/* Returns the counselor uid (field_counselor) of the logged in client. 
 * Being used in Client View @todo: handle the case of the client not having a counselor */
function cfdp_uf_get_counselor_uid(){
  global $user;
  $cid = NULL;
  if (in_array('client', $user->roles)) {
    // Get the client profile
    $profile = profile2_load_by_user($user->uid, 'client');
    // digging right into the object - @todo: this should be done with field_view_field() or similar API function
    $cid = $profile->field_counselor['und'][0]['target_id'];
  }
  // The function was called for a non-client
  else {
    drupal_set_message(t('Error: cfdp_uf_get_counselor_uid() should only be called for clients'), 'error');
  }
  return $cid;
}

/* Setup permissions for marking questions done by using the status field on the question content type */

function cfdp_uf_permission() {
  return array(
    'view question status' => array(
      'title' => t('View the field value'),
      'description' => t('Allows a user to view the status of a question')
    ),
    'archive question' => array(
      'title' => t('Set the status field value to arcchived'),
      'description' => t('Allows a user to archive a question')
    ),
    'reopen question' => array(
      'title' => t('Set the status field value from archived to open'),
      'description' => t('Allows a user to reopen a question')
    ), 
  );
}

function cfdp_uf_menu() {
 $items['cfdp_uf'] = array(
  'title' => 'My title', // The name of the menu that will be displayed
  'page callback' => 'cfdp_uf_page_callback', // The name of the function that will output a page
 );
 return $items;
}

function cfdp_uf_page_callback() {
 // The argument is the name of the function with the form details
 return drupal_get_form('cfdp_uf_form');
}

function cfdp_uf_form($form, &$form_state) {
  
  $node = cfdp_uf_get_current_node();


  if($node->field_status['und'][0]['value'] == 'archived'){

    $label = t('Open');

  }else if($node->field_status['und'][0]['value'] == 'pending'){

    $label = t('Archive');

  }

 $form = array (
  '#action' => '#',
  'archive' => array (
   '#type' => 'hidden',
   '#value' => 'archive',
  ),
  'submit' => array ( //We define a simple submit button
   '#type' => 'submit',
   '#value' => $label,
   '#attributes' => array('onclick' => 'if(!confirm("Really Delete?")){return false;}'),
  ),
 );

 return $form;
}

function cfdp_uf_form_submit($form, &$form_state) {
 
  // Load the current node object
  $node = cfdp_uf_get_current_node();

  // Check if the value of the status field is archvived(string)
  if($node->field_status['und'][0]['value'] == 'archived'){

    $action = 'pending';
    $comments = '2';

  }else if($node->field_status['und'][0]['value'] == 'pending'){

    $action = 'archived';
    $comments = '1';

  }
  
  $node->field_status['und'][0]['value'] = $action;
  
  // Enable or disable the comments
  $node->comment = $comments;
  
  // Overwrite the current node with the new values
  node_save($node);
}


// Help function to load the current node
function cfdp_uf_get_current_node(){
  
  $node = menu_get_object();
  $nid = $node->nid;
  $node = node_load($nid);

  return $node;
}

// Alter the cancellation process and stop cancellation while counselor has clients
function cfdp_uf_form_user_cancel_confirm_form_alter(&$form, &$form_state, $form_id) {
  // Get the uid of the user who's account is about to be cancelled
  $fields = array();
  foreach($form['_account']['#value'] as $key=>$value){
      $fields[$key] = $value;
  }
  unset($value);

  // Store user id and typecast it as integer
  $uid = (int)$fields['uid'];
  
  // Store the roles the user has
  $user_roles = $fields['roles'];
  
  // Find if the user is a counselor or a client
  foreach($user_roles as $key=>$value){
      if($value == 'client'){
        $user_role = 'client';
      }elseif ($value == 'counselor') {
        $user_role = 'counselor';
      }else{
        $user_role = null;
      }
  }

  // Rewrite the cancel link to take the user back to the profile page.
  $form['actions']['cancel']['#title'] = 'Go back';
  $form['actions']['cancel']['#href'] = 'profile/'. $uid;
  $form['actions']['cancel']['#options']['path'] = 'profile/'. $uid;

  // Load the node module
  module_load_include('inc', 'node', 'node.admin');
  
  // Disable all the radio buttons for the cancellaction methods
  $form['user_cancel_method']['user_cancel_block']['#disabled'] = TRUE;
  $form['user_cancel_method']['user_cancel_block_unpublish']['#disabled'] = TRUE;
  $form['user_cancel_method']['user_cancel_reassign']['#disabled'] = TRUE;
  $form['user_cancel_method']['user_cancel_delete']['#disabled'] = TRUE;
  
  if($user_role == 'counselor'){

    
    // Query the db for all client profiles linked to this cousnelor
    $profiles = db_select('field_data_field_counselor', 'fdfc')
    ->fields('fdfc', array('entity_id'))
    ->condition('fdfc.field_counselor_target_id', $uid)
    ->execute()->fetchAllAssoc('entity_id', $fetch = NULL);
    
    // Stop the cancellation chain if the counselor still has clients
    if(count($profiles) >= 1){
      watchdog('user', 'User account cancellation invoked for %user_role with id %uid. Clients still attached.', array('%uid'=> $uid, '%user_role' => $user_role));

      drupal_set_message('<p>' . "Please assign a different counselor to the clients receiving counselling from this counselor. " . '</p>');

      // Remove form elements for the cancellation method
      unset($form['user_cancel_method'], $form['user_cancel_confirm'], $form['user_cancel_notify'], $form['description']);
      
      // Remove the confirm button
      unset($form['actions']['submit']);

    }else{
      
      watchdog('user', 'User account cancellation invoked for %user_role with id %uid', array('%uid'=> $uid, '%user_role' => $user_role));
      
      // Remove form elements for the cancellation method
      unset($form['user_cancel_confirm'], $form['user_cancel_notify'], $form['description']);

      drupal_set_message('<p>' . "The counselor account can be removed." . '</p>');
      
      // Overwrite the submit function call
      $form['#submit'][] = 'cfdp_uf_user_cancel_form_submit';
    }

  }elseif($user_role == 'client'){
    
    // Query the db for all questions created by this client that are still opened
    $query = db_select('node', 'n');
    $query->join('field_data_field_status', 'fdfs', 'n.nid = fdfs.entity_id');
    $query->fields('n', array('nid'));
    $query->condition('n.uid', $uid);
    $query->condition('n.type', 'question');
    $query->condition('fdfs.field_status_value', 'pending');
    $questions = $query->execute()->fetchAllAssoc('nid', $fetch = NULL);

    watchdog('user', 'User account cancellation invoked for %user_role with id %uid', array('%uid'=> $uid, '%user_role' => $user_role));
    $count_questions = count($questions);

    if($count_questions >= 1){
    
      // Remove form elements for the cancellation method
      unset($form['user_cancel_method'], $form['user_cancel_confirm'], $form['user_cancel_notify'], $form['description']);
  
      // Remove the confirm button
      unset($form['actions']['submit']);
      
      // Inform the user about how many open questions this client has
      drupal_set_message('This client has '.$count_questions.' pending questions. Archive them before closing his account.');
    
    }else{
      
      // Remove form elements for the cancellation method
      unset($form['user_cancel_confirm'], $form['user_cancel_notify'], $form['description']);

      drupal_set_message('All your uploaded files will be removed and all the questions you posted will be anonymized.');

      // Overwrite the submit function call      
      $form['#submit'][] = 'cfdp_uf_user_cancel_form_submit';
    } // END else
  } // END elseif
}

function cfdp_uf_user_cancel_form_submit(&$form, &$form_state) {
  // Rather than negating the complex access expression from the original form we can
  // just make the change in the else portion

  global $user;
  $account = $form_state['values']['_account'];
  if (user_access('administer users') && empty($form_state['values']['user_cancel_confirm']) && $account->uid != $user->uid) {
    // Account has already been cancelled by the system.
  }
  else {
    // Cancel the account
    user_cancel($form_state['values'], $account->uid, $form_state['values']['user_cancel_method']);
  }
  
  // Redirect to dashboard
  $form_state['redirect'] = 'oversigt';
}

// Provide a cancel link on the edit profile page
function cfdp_uf_form_profile2_edit_client_form_alter(&$form, &$form_state){
  
  // Get the uid of the user who's account is about to be cancelled
  $fields = array();
  foreach($form['profile_client']['#entity'] as $key=>$value){
      $fields[$key] = $value;
  }
  unset($value);
  // Store user id and typecast it as integer
  $uid = (int)$fields['uid'];

  // Add the cancel link to the form and allow user to get back to the profile page.
  $form['actions']['cancel'] = array(
      '#type' => 'link',
      '#title' => 'Cancel',
      '#href' => 'profile/'. $uid,
      '#weight' => 50,
      '#options' => array('path' => 'profile/'.$uid)
    );
}

  // Update all questions belonging to a client when a new cousnelor is assigned to them
  // All open questions have to be reassigned to the new counselor
function cfdp_uf_user_update(&$edit, $account, $category){
  
  watchdog('user', 'User profile update invoked.');
  
  if(user_access('edit any client profile')){
    // Get the uid's of the new counselor and the client
    $fields = array();
    foreach($account as $key=>$value){
        $fields[$key] = $value;
    }
    unset($value);

    // Store the client's uid
    $client_uid = (int)$fields['uid'];

    // Store the new counselor's uid
    if(array_key_exists('field_dependant_fallback_field_f', $fields) && !empty($fields['field_dependant_fallback_field_f']['und'])){

      $new_counselor = (int)$fields['field_dependant_fallback_field_f']['und'][0]['target_id'];

      // Get the uid of the old/current counselor
      $original_fields = array();
      foreach ($fields['original'] as $key => $value) {
         $original_fields[$key] = $value;
      }

      if(array_key_exists('field_dependant_fallback_field_f', $original_fields) && !empty($original_fields['field_dependant_fallback_field_f']['und'])){
        
        // Store the old counselor's uid
        $old_counselor = (int)$original_fields['field_dependant_fallback_field_f']['und'][0]['target_id'];
      }
    }else{
      watchdog('error','Cound not find uid of old or new counselor.');
      return;
    }
    // Load the node module
    module_load_include('inc', 'node', 'node.admin');

    // Query the db for all questions created by this client that are still opened
    $query = db_select('node', 'n');
    $query->join('field_data_field_status', 'fdfs', 'n.nid = fdfs.entity_id');
    $query->fields('n', array('nid'));
    $query->condition('n.uid', $client_uid);
    $query->condition('n.type', 'question');
    $query->condition('fdfs.field_status_value', 'pending');
    $questions = $query->execute()->fetchAllAssoc('nid', $fetch = NULL);

    if(count($questions) != 0){  
      // Load each question and update the field_assigned_counselor with $new_counselor
      foreach ($questions as $node) {
        $question = node_load($node->nid);
        $question->field_assigned_counselor['und'][0]['target_id'] = $new_counselor;

        // Sotre changes made to the node in the database
        node_save($question);

        drupal_set_message('<pre>Question ' .  $question->nid . ' is now assigned to counselor ' . $question->field_assigned_counselor['und'][0]['target_id'] . '</pre>');

        watchdog('content', 'Question node %nid reassigned from counselor %old_uid to counselor %new_uid.', array('%nid'=> $node->nid, '%old_uid'=>$old_counselor, '%new_uid'=>$new_counselor));
      } // END foreach
    }else{
      watchdog('notice','Client %client_uid has no (open) question. Nothing to reassign.', array('%client_uid'=>$client_uid));
    }
  } // ENDIF user access
  //drupal_set_message('<pre>' . check_plain(var_export($account, TRUE)) . '</pre>');
  //$form_state['redirect'] = 'oversigt';
}